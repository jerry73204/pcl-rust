name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: nightly
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpcl-dev \
          libeigen3-dev \
          libflann-dev \
          libvtk9-dev \
          libboost-all-dev \
          cmake
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install pcl eigen flann vtk boost cmake
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: tests/data
        key: ${{ runner.os }}-test-data-${{ hashFiles('scripts/fetch-test-data.sh') }}
        restore-keys: |
          ${{ runner.os }}-test-data-
        
    - name: Fetch test data
      run: |
        chmod +x scripts/fetch-test-data.sh
        ./scripts/fetch-test-data.sh
        
    - name: Build
      run: cargo build --all-features --verbose
      
    - name: Run unit tests
      run: cargo test --lib --all-features --verbose
      
    - name: Run integration tests
      run: cargo test --test '*' --all-features --verbose
      
    - name: Run doc tests
      run: cargo test --doc --all-features --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpcl-dev \
          libeigen3-dev \
          libflann-dev \
          libvtk9-dev \
          libboost-all-dev \
          cmake
          
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: tests/data
        key: ${{ runner.os }}-test-data-${{ hashFiles('scripts/fetch-test-data.sh') }}
        
    - name: Fetch test data
      run: |
        chmod +x scripts/fetch-test-data.sh
        ./scripts/fetch-test-data.sh
        
    - name: Generate code coverage
      run: |
        cargo tarpaulin --all-features --verbose --out Xml
        
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./cobertura.xml
        fail_ci_if_error: false

  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt
        
    - name: Check formatting
      run: cargo +nightly fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpcl-dev \
          libeigen3-dev \
          libflann-dev \
          libvtk9-dev \
          libboost-all-dev \
          cmake
          
    - name: Run clippy
      run: cargo clippy --all-features -- -D warnings
